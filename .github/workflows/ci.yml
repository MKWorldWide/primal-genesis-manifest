name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Cancel previous runs for the same PR or branch
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  PIP_CACHE_DIR: ~/.cache/pip
  NODE_CACHE_DIR: ~/.npm

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '**/requirements*.txt'

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        if: contains(needs.setup.outputs.has_package_json, 'true')
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f AthenaMyst_Host/requirements.txt ]; then
            pip install -r AthenaMyst_Host/requirements.txt
          fi

      - name: Install Node.js dependencies
        if: contains(needs.setup.outputs.has_package_json, 'true')
        run: npm ci --prefer-offline

      - name: Lint Python
        run: |
          pip install flake8
          flake8 .

      - name: Lint Node.js
        if: contains(needs.setup.outputs.has_package_json, 'true')
        run: npx eslint .

  test:
    name: Test
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '**/requirements*.txt'

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        if: contains(needs.setup.outputs.has_package_json, 'true')
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f AthenaMyst_Host/requirements.txt ]; then
            pip install -r AthenaMyst_Host/requirements.txt
          fi
          pip install pytest pytest-cov

      - name: Install Node.js dependencies
        if: contains(needs.setup.outputs.has_package_json, 'true')
        run: npm ci --prefer-offline

      - name: Run Python tests
        run: |
          python -m pytest AthenaMyst_Host/tests --cov=./ --cov-report=xml --cov-report=html --maxfail=10 --disable-warnings -v

      - name: Run Node.js tests
        if: contains(needs.setup.outputs.has_package_json, 'true')
        run: npm test -- --coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            htmlcov/
            coverage/

  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      has_package_json: ${{ steps.check-package-json.outputs.exists }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Check for package.json
        id: check-package-json
        run: |
          if [ -f "package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi